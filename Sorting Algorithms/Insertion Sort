/*Insertion Sort:
Insertion sort deals wih stream of integers
 a=[1 5 9 14] <- 4
The new element has to be inserted at last => O(N)

a[]=[] => [10] => [10,30] => [10,30,5] => [10,5,30] => [5,10,30] => [5,10,30,7] => [5,10,7,30] => [5,7,10,30]

Dynamic array is used in this case because time limitmay be exceeded and it may run out of speed
*/
#include <bits/stdc++.h>
using namespace std;

void insertionSort(vector<int>&arr, int val){
    arr.push_back(val);

    for(int i=arr.size()-1; i>0; i--){
        if(arr[i]>arr[i-1]){
            break;
        }
        swap(arr[i], arr[i-1]);
    }
}
int main(){
    int N;
    cin >> N;

    vector<int> arr;

    while(N--){
        int val;
        cin >> val;

        insertionSort(arr, val);
        
        for(int i : arr){
            cout << i << " ";
        }
        cout << endl;
    }

}

/*
Time Complexity:
Best Case : O(N) => Array elements are in sorted way
Worst Case : O(N^2) => Array is sorted in descending order
Avg Case : O(N^2) => Array is in random order
Use Cases:
Query related problems. Eg:median
*/
