import java.util.Scanner;
class Solution {
    public static void quickSort(int arr[],int low,int high){
        if(low<high){
            int j=partition(arr,low,high);
            quickSort(arr,low,j);
            quickSort(arr,j+1,high);
        }
    }
    public static int partition(int arr[],int low,int high){
        int pivot=arr[low];
        int i=low,j=high;
        while(i<j){
            do{
                i++;
            }while(arr[i]<=pivot);
            do{
                j--;
            }while(arr[j]>pivot);
            if(i<j){
                swap(arr[i],arr[j]);
            }
        }
        swap(arr[low],arr[j]);
        return j;
    }
    public static void swap(int a,int b){
        int temp=a;
        a=b;
        b=temp;
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println("Array Before sorting:");
        for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
        quickSort(arr,0,n-1);
        //After Sorting
        System.out.println("Array after sorting:");
        for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
    }
}
/*Time Complexity: Best Case: O(N logN) => If the pivot is  in the middle
                   Worst Case: O(N^2) => If the list is already sorted
                    Instead, we can choose middle element as pivot
*/
