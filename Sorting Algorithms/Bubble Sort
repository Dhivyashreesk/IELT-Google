/*Bubble Sort
=> Sort the elements by peer comparison (i.e, Pulling the greater element to the right)

a[]=[5,2,7,3,1] => [2,5,7,3,1] => [2,5,3,7,1] => [2,5,3,1,7] => last index is sorted
     j->     i     
     
=> [2,5,3,1,7] => [2,3,5,1,7] => [2,3,1,5,7]
    j->   i                             sorted
    
=> [2,3,1,5,7] => [2,1,3,5,7]
    j-> i              sorted
    
=> [2,1,3,5,7] => [1,2,3,5,7]
    j i             sorted
*/
#include <bits/stdc++.h>
using namespace std;
void bubbleSort(vector<int>& arr){
    for(int i=arr.size()-1; i>0; i--){
        bool isSwapped = false;
        for(int j=0; j<i; j++){
            if(arr[j]>arr[j-1]){
                swap(arr[j], arr[j+1]);
                isSwapped = true;
            }
        }
        if(!isSwapped){
            break;
        }
    }
}
int main(){
    int N; 
    cin >> N;

    vector<int> arr(N);
    for(int &i : arr){
        cin >> i;
    }

    bubbleSort(arr);

    for(int i : arr){
        cout << i << " ";
    }
}
/*
Time Complexity:
Worst Case : O(N^2) => If the array sorted in descending order (Eg: a[]=[4,3,2,1])
Best Case : O(N) => Array already sorted (Eg: a[]=[1,2,3,4,5])
Average Case : O(N^2) => Array elements arranged in random order (Eg: a[]=[5,2,7,3,1])
*/
