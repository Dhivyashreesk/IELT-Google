/*Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.
You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:
Input: nums = [2,2,3,2]
Output: 3

Example 2:
Input: nums = [0,1,0,1,0,1,99]
Output: 99
*/
class Solution {
    public int singleNumber(int[] nums) {
        int ans = 0;
        for (int i = 0; i < 32; i++) // till 32 because 4 byte has 32 bits
        {
            int bitCount = 0;
            for (int j = 0; j < nums.length; j++)
            {
                if (((nums[j] >> i) & 1) == 1)
                    bitCount++;
            }
        bitCount %= 3;
        if (bitCount!=0)
        {
            ans = ans | bitCount << i;
        }
    }
    return ans;
    }
}
