/*Given a number, check if it is a perfect square or not. 

Examples : 

Input : 2500
Output : Yes
Explanation:
2500 is a perfect square.
50 * 50 = 2500

Input  : 2555
Output : No
*/
#include <bits/stdc++.h>
using namespace std;
 
bool isPerfectSquare(int n)
{
    for (int i = 1; i * i <= n; i++) {
 
        // If (i * i = n)
        if ((n % i == 0) && (n / i == i)) {
            return true;
        }
    }
    return false;
}
int main()
{
    long long int n;
    cin >> n;
    if (n == 0 || isPerfectSquare(n))
        cout << "Yes";
    else
        cout << "No";
 
    return 0;
}
//Time Complexity: O(sqrt(N))

/*Method 2:
Using use binary search to find a number in the range 1 to n whose square is equal to n, 
such that at each iteration the problem statement reduces to half [1 to n/2-1 OR n/2 to n].

Time complexity: O(log N)
*/

#include <bits/stdc++.h>
using namespace std;

bool isPerfectSquare(int x)
{
 long long left = 1, right = x;
 while (left <= right) {
  long long mid = (left + right) / 2;
  // Check if mid is perfect square
  if (mid * mid == x) {
   return true;
  }
  // Mid is small -> go right to increase mid
  if (mid * mid < x) {
   left = mid + 1;
  }
  // Mid is large -> to left to decrease mid
  else {
   right = mid - 1;
  }
 }
 return false;
}

int main()
{
 int n;
 cin >> n;
 if (n == 0 || isPerfectSquare(n))
  cout << "Yes";
 else
  cout << "No";
 return 0;
}
