class Solution {
    public int findKthLargest(int[] nums, int k) {
        int low = 0, high = nums.length - 1, index = nums.length - k;
        while (low < high) {
            int partition = partition(nums, low, high);
            if (partition < index) low = partition + 1; 
            else if (partition > index) high = partition - 1;
            else return nums[partition];
        }
        return nums[low];
    }
    
    private int partition(int[] nums, int low, int high) {
        int pivot = low, temp;
        while (low <= high) {
            while (low <= high && nums[low] <= nums[pivot]) low++;
            while (low <= high && nums[high] > nums[pivot]) high--;
            if (low > high) break;
            temp = nums[low];
            nums[low] = nums[high];
            nums[high] = temp;
        }
        temp = nums[high];
        nums[high] = nums[pivot];
        nums[pivot] = temp;
        return high;
    }
}
