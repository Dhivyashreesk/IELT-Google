class Solution {
    public int partition(int[] arr, int low, int high) {
        int pivot=arr[high],i=low;
        for(int j=low;j<=high;j++){
            if(arr[j]>pivot){
                int temp=arr[j];
                arr[j]=arr[i];
                arr[i]=temp;
                i++;
            }
        }
        int temp=arr[high];
        arr[high]=arr[i];
        arr[i]=temp;
        return i;
    }
    public int findKthLargest(int[] nums, int k) {
        int low = 0, high = nums.length - 1;
        int ans= KthLargest(nums,low,high,k);
        return ans;
    }
    public int KthLargest(int []arr,int low,int high,int k){
        int partition=partition(arr,low,high);
        if(partition==k-1){
            return arr[partition];
        }else if(partition<k-1){
            return KthLargest(arr,partition+1,high,k);
        }else{
            return KthLargest(arr,low,partition-1,k);   
        }
    }
}
