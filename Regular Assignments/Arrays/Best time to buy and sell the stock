class Solution {
    public int maxProfit(int[] prices) {
        int maxDiff=0;
        int currMin=prices[0];
        for(int i=0;i<prices.length;i++) {
            if(prices[i]>=currMin) {
                int currDiff=prices[i]-currMin;
                if(currDiff>maxDiff) {
                    maxDiff=currDiff;
                }
                continue;
           }
        currMin=prices[i];
      }
     return maxDiff;
     }
}

Kadane's algorihm:
The logic is to calculate the difference (maxCur += prices[i] - prices[i-1]) of the original array, and find a contiguous subarray giving maximum profit. 
If the difference falls below 0, reset it to zero.

class Solution {
    public int maxProfit(int[] prices) {
        int maxCur = 0, maxSoFar = 0;
        for(int i = 1; i < prices.length; i++) {
            maxCur = Math.max(0, maxCur += prices[i] - prices[i-1]);
            maxSoFar = Math.max(maxCur, maxSoFar);
        }
        return maxSoFar;
    }
}
