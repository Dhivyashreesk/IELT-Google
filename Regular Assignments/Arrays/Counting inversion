#include <bits/stdc++.h>
using namespace std;
  
int mergeSort(int arr[], int temp[], int left, int right);
int merge(int arr[], int temp[], int left, int mid,
          int right);
int mergeSort(int arr[], int array_size)
{
    int temp[array_size];
    return mergeSort(arr, temp, 0, array_size - 1);
}
int mergeSort(int arr[], int temp[], int left, int right)
{
    int mid, invCount = 0;
    if (right > left) {
        mid = (right + left) / 2;
  
        /* Inversion count will be sum of inversions in left-part, right-part and number of inversions in merging */
        invCount += mergeSort(arr, temp, left, mid);
        invCount += mergeSort(arr, temp, mid + 1, right);
  
        //Merge the two parts
        invCount += merge(arr, temp, left, mid + 1, right);
    }
    return invCount;
}
  
/* This function merges two sorted arrays
and returns inversion count in the arrays.*/
int merge(int arr[], int temp[], int left, int mid,
          int right)
{
    int i, j, k;
    int invCount = 0;
  
    i = left; // i is index for left subarray
    j = mid; // j is index for right subarray
    k = left; // k is index for resultant merged subarray
    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        }
        else {
            temp[k++] = arr[j++];
            //inversion count is the no.of.elements right to it
            invCount = invCount + (mid - i);
        }
    }
  
    /* Copy the remaining elements of left subarray (if there are any) to temp*/
    while (i <= mid - 1)
        temp[k++] = arr[i++];
  
    /* Copy the remaining elements of right subarray
       (if there are any) to temp*/
    while (j <= right)
        temp[k++] = arr[j++];
  
    //Copy back the merged elements to original array
    for (i = left; i <= right; i++)
        arr[i] = temp[i];
  
    return invCount;
}
int main()
{
    int arr[] = {1,20,6,7,5,8,11,3};
    int n = sizeof(arr) / sizeof(arr[0]);
    int res = mergeSort(arr, n);
    cout << " Number of inversions are " << res;
    return 0;
}
