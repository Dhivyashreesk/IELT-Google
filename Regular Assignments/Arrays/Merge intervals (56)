The idea is to sort the intervals by their starting points. 
Then, we take the first interval and compare its end with the next intervals starts. 
As long as they overlap, we update the end to be the max end of the overlapping intervals.
Once we find a non overlapping interval, we can add the previous "extended" interval and start over.

Sorting takes O(n log(n)) and merging the intervals takes O(n). So, the resulting algorithm takes O(n log(n)).

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        //base case
        if(intervals.size()<=1) 
            return intervals;
        //resultan vector
        vector<vector<int>> result;
        //sort takes O(nlogn) time
        sort(intervals.begin(), intervals.end()); 
        //insert the the the first interval in the result
        result.push_back(intervals[0]);
         //Traverse the whole vector .Takes O(n) time
        for(int i=1; i<intervals.size(); i++) {
             //if intevals are overlapping
            if(result.back()[1] >= intervals[i][0]) 
                result.back()[1] = max(result.back()[1] , intervals[i][1]);
            //else they are not overlapping
            else 
                result.push_back(intervals[i]); 
        }
        return result;
    }
};
