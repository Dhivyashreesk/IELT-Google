//Bucket Sorting for decimal numbers:
import java.util.*;
import java.util.Collections;

class Solution {

 // Function to sort arr[] of size n
 // using bucket sort
 static void bucketSort(float arr[], int n)
 {
  if (n <= 0)
   return;

  // 1) Create n empty buckets
  @SuppressWarnings("unchecked")
  Vector<Float>[] buckets = new Vector[n];

  for (int i = 0; i < n; i++) {
   buckets[i] = new Vector<Float>();
  }

  // 2) Put array elements in different buckets
  for (int i = 0; i < n; i++) {
   float idx = arr[i] * n;
   buckets[(int)idx].add(arr[i]);
  }

  // 3) Sort individual buckets
  for (int i = 0; i < n; i++) {
   Collections.sort(buckets[i]);
  }

  // 4) Concatenate all buckets into arr[]
  int index = 0;
  for (int i = 0; i < n; i++) {
   for (int j = 0; j < buckets[i].size(); j++) {
    arr[index++] = buckets[i].get(j);
   }
  }
 }
 public static void main(String args[])
 {
  float arr[] = { (float)0.897, (float)0.565,
      (float)0.656, (float)0.1234,
      (float)0.665, (float)0.3434 };

  int n = arr.length;
  bucketSort(arr, n);

  System.out.println("Sorted array is ");
  for (float el : arr) {
   System.out.print(el + " ");
  }
 }
}
/*Bucket Sorting for Integer elements
Find range = (max - min) / noOfBuckets
bucketIndex = (array[i] - minimum) / range
Finally, sort and gather
For integer elements, we need to follow the following algorithm:

 1. Calculate the maximum and the minimum element of the array
 2. Calculate the range: range = (maximum - minimum) / n, where n is the number of buckets (Given as parameter)
 3. Create n empty buckets and initialize them with 0
 4. Loop through the unsorted array and perform the following: a) Calculate bucketIndex bucketIndex = (array[i] - minimum) / range b) Insert the ith element of the array into the bucket[bucketIndex]
 5. Sort the individual buckets
 6. Gather all the elements together
 */
Time Complexity:
Best Case Time Complexity: O(n+k)
Average Case Time Complexity: O(n)
Worst Case Time Complexity: O(n^2)
